#include <stdio.h>

struct Process {
    int pid;   // Process ID
    int at;    // Arrival Time
    int bt;    // Burst Time
    int ct;    // Completion Time
    int tat;   // Turnaround Time
    int wt;    // Waiting Time
    int done;  // To mark completion
};

int main() {
    int n, time = 0, completed = 0, min_index;
    float total_tat = 0, total_wt = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time for P%d: ", p[i].pid);
        scanf("%d", &p[i].at);
        printf("Enter Burst Time for P%d: ", p[i].pid);
        scanf("%d", &p[i].bt);
        p[i].done = 0;  // not completed initially
    }

    // Non-preemptive SJF Scheduling
    while (completed < n) {
        min_index = -1;

        // find process with smallest burst time among arrived & not completed
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && !p[i].done) {
                if (min_index == -1 || p[i].bt < p[min_index].bt) {
                    min_index = i;
                }
            }
        }

        if (min_index == -1) {
            // if no process has arrived yet, increase time
            time++;
        } else {
            // execute process fully
            time += p[min_index].bt;
            p[min_index].ct = time;
            p[min_index].tat = p[min_index].ct - p[min_index].at;
            p[min_index].wt = p[min_index].tat - p[min_index].bt;

            total_tat += p[min_index].tat;
            total_wt += p[min_index].wt;

            p[min_index].done = 1;
            completed++;
        }
    }

    // Print result
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt,
               p[i].ct, p[i].tat, p[i].wt);
    }

    printf("\nAverage Turnaround Time = %.2f", total_tat / n);
    printf("\nAverage Waiting Time = %.2f\n", total_wt / n);

    return 0;
}
