#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5               // number of philosophers
#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];
pthread_mutex_t mutex;
pthread_mutex_t chopstick[N];

void test(int i) {
    if (state[i] == HUNGRY && state[(i + 4) % N] != EATING && state[(i + 1) % N] != EATING) {
        state[i] = EATING;
        printf("Philosopher %d is Eating\n", i + 1);
        sleep(2);
    }
}

void take_chopsticks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = HUNGRY;
    printf("Philosopher %d is Hungry\n", i + 1);
    test(i);
    pthread_mutex_unlock(&mutex);

    pthread_mutex_lock(&chopstick[i]);
}

void put_chopsticks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    printf("Philosopher %d is Thinking\n", i + 1);
    test((i + 4) % N);
    test((i + 1) % N);
    pthread_mutex_unlock(&mutex);

    pthread_mutex_unlock(&chopstick[i]);
}

void* philosopher(void* num) {
    int i = *(int*)num;
    while (1) {
        sleep(1);
        take_chopsticks(i);
        sleep(2);
        put_chopsticks(i);
    }
}

int main() {
    int i;
    pthread_t tid[N];
    int phil[N];

    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < N; i++)
        pthread_mutex_init(&chopstick[i], NULL);

    for (i = 0; i < N; i++) {
        phil[i] = i;
        pthread_create(&tid[i], NULL, philosopher, &phil[i]);
        printf("Philosopher %d is Thinking\n", i + 1);
    }

    for (i = 0; i < N; i++)
        pthread_join(tid[i], NULL);

    return 0;
}
