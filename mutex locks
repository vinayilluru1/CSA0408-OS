#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t lock;
int counter = 0;   // shared resource

void* function(void* arg) {
    for (int i = 0; i < 5; i++) {
        pthread_mutex_lock(&lock);    // enter critical section

        counter++;
        printf("Thread %ld incremented counter to %d\n", (long)arg, counter);

        pthread_mutex_unlock(&lock);  // exit critical section
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    pthread_mutex_init(&lock, NULL);

    pthread_create(&t1, NULL, function, (void*)1);
    pthread_create(&t2, NULL, function, (void*)2);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    pthread_mutex_destroy(&lock);

    printf("Final counter value: %d\n", counter);
    return 0;
}
